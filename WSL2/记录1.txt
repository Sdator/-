# 列出路由表条目
bash -c 'ip route show'

# 获取系统 ip4 地址
# 显示特定网络接口信息 寻找 inet 关键字\b用于词尾锚定 单词必须以特定结尾等同 \>
ip addr show eth0 | grep 'inet\b' | awk '{print $2}' |  cut -d/ -f1
ip addr show eth0 | grep 'inet\>' | awk '{print $2}' |  cut -d/ -f1

ip addr show eth0 | grep 'inet\>' | awk '{print $2}' |  cut -d/ -f1

grep listen /var/log/docker.log | cut -d/ -f1
grep listen host= /var/log/docker.log

bash -c 'ping 192.168.3.1'

# 添加 ipv4 地址路由自动识别x.x.x.1
ip addr add 10.0.0.1/255.255.255.0 dev eth0
# 同时会设置广播地址 路由接口
ip addr add 10.0.0.1/32 broadcast 172.27.79.255 dev eth0
ip addr add 172.27.74.100/24 broadcast 172.27.79.255 dev eth0
ip addr add 192.168.50.16/24 broadcast 172.27.79.255 dev eth0
ip addr add 172.27.64.100/32 broadcast 172.27.79.255 dev eth0
ip addr add 172.27.64.100/24 broadcast 172.27.79.255 dev eth0


ip addr del 10.0.0.1/255.255.255.0 dev eth0
ip addr del 10.0.0.1/255.255.255.255 dev eth0
ip addr del 172.27.64.100/24 broadcast 172.27.79.255 dev eth0
ip addr del 10.0.0.1/32 broadcast 172.27.79.255 dev eth0

172.27.64.1

echo $(ip route | head -1 |awk '{print $3}')00

$ip = $(ip route | head -1 |awk '{print $3}')00
$brd = ip addr show eth0 | grep 'inet\>' | awk '{print $4}'


# 添加一个静态地址 用于外部宿主机访问
cat > /etc/profile.d/custom.sh << EOF
ip addr add $(ip route | head -1 | awk \'{print $3}\')00/32 broadcast $(ip addr show eth0 | grep inet\\> | awk \'{print $4}\') dev eth0
EOF


vi /etc/profile.d/custom.sh


ip addr add $(ip route | head -1 | awk '{print $3}')00/32 broadcast $(ip addr show eth0 | grep "inet\>" | awk '{print $4}') dev eth0

ip addr del $(ip route | head -1 | awk '{print $3}')00/32 broadcast $(ip addr show eth0 | grep "inet\>" | awk '{print $4}') dev eth0

wsl -u root -e sh -c 'ip addr add 10.0.0.2/32 broadcast 10.0.15.255 dev eth0'

wsl -u root -e sh -c 'ip route add default via 10.0.0.2 dev eth0'

wsl -u root -e sh -c 'ip route add via 10.0.0.100 dev eth0'

# 删除默认路由
'ip route del default via 172.24.144.1 dev eth0'

'ip addr add 10.0.0.2/32 broadcast 10.0.15.255 dev eth0'


ip addr show eth0 | grep "inet\b" | awk '{print $2,$4}' | xargs -pi ip addr del $(awk '{print $1}') broadcast $(awk '{print $2}') dev eth0

ip addr show eth0 | grep "inet\b" | awk '{print $2,$4}' | xargs -pL 1 -n 1 echo $*
ip addr show eth0 | grep "inet\b" | awk '{print $2,$4}' | xargs -p -n 1 echoarg.sh -p {} -l
ip addr show eth0 | grep "inet\b" | awk '{print $2,$4}' | xargs -p -n 1 ./echoarg.sh -p {} -l

ip addr show eth0 | grep "inet\b" | awk '{print $2,$4}' | xargs -I % sh -c "% >| awk '{print $2}'"
ip addr show eth0 | grep "inet\b" | awk '{print $2,$4}' | xargs -i sh -c "./echoarg.sh -p {} -l"
ip addr show eth0 | grep "inet\b" | awk '{print $2,$4}' | xargs -tI % sh -c "echo %|awk '{print $2}'"

ip addr show eth0 | grep "inet\b" | awk '{print $2,$4}' | xargs -tI % sh -c "echo %|cut -d 1"




"awk '{print $1} %"



ip addr show eth0 | grep "inet\b" | awk '{print $2,$4}' | xargs -n 1

 {awk '{print $1}'}






 % >
 % >| xargs -n 1 echo
xargs -n1


# 一次读取一行
-I %  自定义替换符为%
-i    默认替换符为{}

# 高级用法
 echo "file1 file2 file3" | xargs -t -I % sh -c '{ touch %; ls -l %; }'

ip addr show eth0 | grep "inet\b" | awk '{print $2}'


# print0 特殊字符替换为null 方便xargs读取  因为命令默认使用空格分隔
find . -name "*.log" -print0 | xargs


find /default.prop -name "hosts" -type f


ip addr del $(awk '{print $1}') broadcast $(awk '{print $1}') dev eth0


172.24.147.217/20 172.24.159.255
172.24.144.100/32 172.24.159.255
10.0.0.100/32 10.0.15.255
10.0.0.2/32 10.0.15.255




172.24.159.255 172.24.159.255 10.0.15.255 10.0.15.255

ip addr show eth0 | grep "inet\>" | awk '{print $4}'


ip addr del 172.24.147.217/20 broadcast 172.24.159.255 172.24.159.255 10.0.15.255 10.0.15.255 dev eth0 ?...

ip addr show eth0

-p      访问
-L 1    一次读取一行
-i      一次读取一行 {}
-t 表示先打印命令，然后再执行。





sed -e '3,$d' -e 'grep 217'


批量删除




/etc/resolv.conf
    # This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:
    # [network]
    # generateResolvConf = false
    nameserver 172.24.144.1



inet 172.24.147.217/20 brd 172.24.159.255 scope global eth0
inet 172.24.144.100/32 brd 172.24.159.255 scope global eth0

inet 10.0.0.100/32 brd 10.0.15.255 scope global eth0
inet 10.0.0.2/32 brd 10.0.15.255 scope global eth0






ip addr show eth0


bash -c "ip addr"

bash -c "ls -l ~/.profile"

# 路由
172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 linkdown
172.19.0.0/16 dev br-60501fe12c5e proto kernel scope link src 172.19.0.1
172.27.64.0/24 dev eth0 proto kernel scope link src 172.27.64.100
172.27.64.0/20 dev eth0 proto kernel scope link src 172.27.74.115
172.27.74.0/24 dev eth0 proto kernel scope link src 172.27.74.100





# 列出指定地址路由   如果非范围内地址会通过 wsl 接口 172.27.64.1 转发到 UB接口 172.27.74.115
ip route get 192.168.17.130
# 添加默认路由
ip route add default via 192.168.17.3


# 各接口流量统计
ip -s link
# 特定接口流量统计 -s 包含错误流量 应该是防火墙禁止的条目
ip -s -s link ls eth0
ip -s link ls eth0

# 启用网卡
ip link set eth0 up
# 禁用网卡
ip link set eth0 down

# ARP 查看
ip neighbour
ip monitor all


# 和在 Window系 统中一样 自带了一条路由条目，在 wsl 中所有 172.27.64.0-172.27.79.255 地址都会先转到 172.27.74.115 接口
    default via 172.27.64.1 dev eth0
    172.27.64.0/20 dev eth0 proto kernel scope link src 172.27.74.115


4: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
    物理地址
    link/ether 00:15:5d:fc:d7:27 brd ff:ff:ff:ff:ff:ff

    IPV4 地址和子掩码
    inet 172.27.74.115/20 brd 172.27.79.255 scope global eth0



172.27.64.0-172.27.79.255   转发到 wsl 172.27.64.1

     172.27.64.0    255.255.240.0         On-link       172.27.64.1   5256
      172.27.64.1  255.255.255.255         On-link       172.27.64.1   5256
    172.27.79.255  255.255.255.255         On-link       172.27.64.1   5256



# 除法

+ 10/5=2
# 应用
    + 分苹果    有10个苹果每人分5个可以分给两个人
    + 分苹果    有10个苹果每人分5个可以分给两个人


百分比

10%
    读作：百分之十
    等同：10/100
