untitled:Untitled-6
ps1


GPU
    1MB的帧缓存
    最大1024×512分辨率16位象素的屏幕

    16色
        一个像素1字         16位
        每种颜色值0-31色    5位
    24色
        一个像素3字节       24位
        每种颜色256色       1字节/8位




1F80_1000-1F80_2FFF     硬件寄存器 8K 

    DMA 通道
    0x1F80_10A0 DMA2 GPU        (列表＋图像数据) 
    0x1F80_10E0 DMA6 GPU OTC    (反向清除顺序表) 

GPU控制寄存器
    0x1F80_1810     GPU数据寄存器           用于交换数据
    0x1F80_1814     GPU控制/状态寄存器      在读取时给出GPU状态，在写入时设置控制位。






字库  4bpp
    16排
    17行    应该16行  17行开始是第二张字库  16*16=256一张字库的像素大小


一个图块的像素大小 4*16，占用字节4*4*16=256b/8=32字节
    图块大小（字节）=(bpp*像素高度*像素宽度)/8

图块第n行开始地址 = n*一个图块的像素大小*一行图块总数
                n                              图块的第n行
                4/8*4*16                       图块大小
                字库宽度/图块宽度               一行图块总数  
                
                假设256*256的字库大小  图块宽度为4，即一行共有256*4个图块
                
                图块一行所占用长度=一个图块的像素大小*一行图块总数
            

{
    function 枚举图块开始地址(开始地址,bpp,图块宽度,图块高度,字库宽度,字库高度){
        const 地址 = []
        for (let index = 0; index < 图块高度; index++) {
            const 图块大小 = bpp/8*图块宽度*图块高度
            const 图块数量 = 字库宽度/图块宽度
            地址[index]= (开始地址+图块大小*图块数量*index).toString(16)
        }
        console.log(地址)
    }

    function 取图块开始地址(bpp,块位置){
        const 地址 = (1024/bpp*块位置).toString(16)
        console.log(地址)
        return 地址
    }


    let num = 取图块开始地址(4,3)
   枚举图块开始地址(0x300,4,4,16,256,256)

}








字库一行占用  4（一个像素占用4位）*16（一行16个字）=64/8= 8字节  整张字库就是8*8=64字节  






